{"version":3,"sources":["logo.png","components/Menu.js","components/TypeSelector.js","components/Question.js","components/Options.js","components/CreateSurvey.js","components/Published.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","className","to","TypeSelector","qtype","setQtype","value","onChange","event","type","parseInt","target","Question","onTextUpdate","id","placeholder","Options","addOptions","deleteOptions","uid","updateText","onClick","CreateSurvey","squestions","setSquestions","history","useHistory","getRandom","Math","floor","random","defaultOptionsState","useState","qText","setQtext","qType","options","setOptions","newOption","updatedOptions","push","length","alert","pop","updateOptionText","text","changeIndex","findIndex","x","updateSurveyQuestion","newSurveyQuestion","newQ","qtext","map","opt","key","Published","questions","q","name","App","alt","src","Logo","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1ab0c9f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.71920b22.png\";","import { Link } from \"react-router-dom\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <Link to=\"/create\">\r\n        <button className=\"btn btn-danger m-1\">Create Survey</button>\r\n        <br />\r\n      </Link>\r\n      <Link to=\"/published\">\r\n        <button className=\"btn btn-danger m-1\">Take Survey</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","const TypeSelector = ({ qtype, setQtype }) => {\r\n  return (\r\n    <>\r\n      <div className=\"col-md-6 offset-md-3 col-12\">\r\n        <select\r\n          className=\"custom-select\"\r\n          value={qtype}\r\n          onChange={(event) => {\r\n            let type = parseInt(event.target.value);\r\n            setQtype(type);\r\n          }}\r\n        >\r\n          <option value=\"0\">Choose Question Type</option>\r\n          <option value=\"1\">Multi-Select</option>\r\n          <option value=\"2\">Single-Select</option>\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TypeSelector;\r\n","const Question = ({ onTextUpdate }) => {\r\n  return (\r\n    <>\r\n      <div className=\"col-md-8 offset-md-2 col-12 input-group my-3\">\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            ?\r\n          </span>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Question\"\r\n          onChange={(event) => onTextUpdate(event.target.value)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","const Options = ({ addOptions, deleteOptions, uid, updateText }) => {\r\n  return (\r\n    <>\r\n      <div className=\"col-md-8 offset-md-2 col-12 input-group my-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Option Text\"\r\n          onChange={(event) => {\r\n            updateText(uid, event.target.value);\r\n          }}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button\r\n            className=\"btn btn-outline-secondary\"\r\n            type=\"button\"\r\n            onClick={() => addOptions()}\r\n          >\r\n            +\r\n          </button>\r\n          <button\r\n            className=\"btn btn-outline-secondary\"\r\n            type=\"button\"\r\n            onClick={() => deleteOptions()}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import TypeSelector from \"./TypeSelector\";\r\nimport Question from './Question';\r\nimport Options from \"./Options\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst CreateSurvey = ({ squestions, setSquestions }) => {\r\n\r\n    const history = useHistory();\r\n    const getRandom = () => { return Math.floor((Math.random() * 1000) + 1);}\r\n    const defaultOptionsState = [{uid: getRandom(), value:''},{uid: getRandom(), value:''}];\r\n    const [qText, setQtext] = useState('');\r\n    const [qType, setQtype] = useState(0);\r\n    const [options, setOptions] = useState(defaultOptionsState);\r\n\r\n    const addOptions = () => {\r\n        let newOption = {\r\n            uid: getRandom(),\r\n            value: ''\r\n        }\r\n        let updatedOptions  = [...options];\r\n        updatedOptions.push(newOption);\r\n        setOptions(updatedOptions);\r\n\r\n    }\r\n\r\n    const deleteOptions = () => {\r\n        if(options.length === 2) {\r\n            alert(\"Error: A select type question should have atleast 2 options\");\r\n        } else {\r\n            let updatedOptions = [...options];\r\n            updatedOptions.pop();\r\n            setOptions(updatedOptions);\r\n        }\r\n        \r\n    }\r\n\r\n    const updateOptionText = (id, text) => {\r\n        let updatedOptions = [...options];\r\n        let changeIndex = updatedOptions.findIndex(x => x.uid === id);\r\n        updatedOptions[changeIndex].value = text;\r\n        setOptions(updatedOptions);\r\n    }\r\n\r\n    const updateSurveyQuestion = () => {\r\n        let newSurveyQuestion = [...squestions];\r\n        let newQ = {\r\n            qtext : qText,\r\n            qtype : qType,\r\n            options : options\r\n        }\r\n        newSurveyQuestion.push(newQ);\r\n        setSquestions(newSurveyQuestion);\r\n        setQtype(0);\r\n        setQtext('');\r\n        setOptions(defaultOptionsState);\r\n        \r\n    }\r\n\r\n    const publish = () => {\r\n        updateSurveyQuestion();\r\n        history.push('/published')\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <TypeSelector qtype={qType} setQtype={setQtype} />\r\n            \r\n            {qType !== 0 ?\r\n                <>\r\n                    <Question onTextUpdate={setQtext} />\r\n                    \r\n                    {options.map((opt, key) => (\r\n                        \r\n                        <Options \r\n                            key={key}\r\n                            uid = {opt.uid}\r\n                            addOptions={addOptions} \r\n                            deleteOptions={deleteOptions}\r\n                            updateText = {updateOptionText}\r\n                        /> \r\n                            \r\n                        \r\n                    ))}\r\n                     <button className=\"btn btn-primary m-1\" onClick={() => updateSurveyQuestion()}>Add Question</button>\r\n                    <button className=\"btn btn-primary m-1\" onClick={() => publish()}>Publish</button>\r\n                </>\r\n            : null}\r\n\r\n           \r\n                  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateSurvey;","const Published = ({ questions }) => {\r\n  return (\r\n    <>\r\n      <div className=\"mt-5 text-left\">\r\n        {questions.length > 0 ? (\r\n          questions.map((q, key) => (\r\n            <div key={key}>\r\n              <h3 className=\"my-3\">{q.qtext}</h3>\r\n              {q.options.map((opt) =>\r\n                q.qtype === 1 ? (\r\n                  <div className=\"form-check\" key={opt.uid}>\r\n                    <label className=\"form-check-label\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"\r\n                        value=\"\"\r\n                      />\r\n                      {opt.value}\r\n                    </label>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"form-check\" key={opt.uid}>\r\n                    <label className=\"form-check-label\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        className=\"form-check-input\"\r\n                        name=\"random\"\r\n                      />\r\n                      {opt.value}\r\n                    </label>\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"text-center\">\r\n            <h2>No Questions added</h2>\r\n          </div>\r\n        )}\r\n\r\n        {questions.length !== 0 ? (\r\n          <div className=\"text-right\">\r\n            <button className=\"btn btn-primary\">Confirm</button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Published;\r\n","import \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Logo from \"./logo.png\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Menu from \"./components/Menu\";\r\nimport CreateSurvey from \"./components/CreateSurvey\";\r\nimport Published from \"./components/Published\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [squestions, setSquestions] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-10 offset-md-1 col-12 text-center\">\r\n        <Router>\r\n          <Link to=\"/\">\r\n            <img className=\"col-md-6\" alt=\"logo\" src={Logo} />\r\n          </Link>\r\n          <Switch>\r\n            <Route path=\"/\" component={Menu} exact />\r\n            <Route path=\"/create\" exact>\r\n              <CreateSurvey\r\n                squestions={squestions}\r\n                setSquestions={setSquestions}\r\n              ></CreateSurvey>\r\n            </Route>\r\n            <Route path=\"/published\">\r\n              <Published questions={squestions} />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import slides from './data.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}